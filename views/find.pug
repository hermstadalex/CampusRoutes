extends layout

block content
    
    input(id="origin-input" class="controls" type="text"
        placeholder="Enter an origin location")

    input(id="destination-input" class="controls" type="text"
        placeholder="Enter a destination location")

    div(id="mode-selector" class="controls")
      input(type="radio" name="type" id="changemode-walking" checked="checked")
      label(for="changemode-walking") Walking

      input(type="radio" name="type" id="changemode-transit")
      label(for="changemode-transit") Transit

      input(type="radio" name="type" id="changemode-driving")
      label(for="changemode-driving") Driving
          
    div(id="map")

    script(type="text/javascript").
        var pathArray;
        var pathArray2;
        var pathArray3;
        var map;
        $(document).ready(function(){
        
            var datString = "#{data}".replace(/&quot;/g, '"');
            var comp = decodeURIComponent(datString);
            var data = JSON.parse(comp);
            
            pathArray = data.paths;
            
            var datString2 = "#{data2}".replace(/&quot;/g, '"');
            var comp2 = decodeURIComponent(datString2);
            var data2 = JSON.parse(comp2);
            
            pathArray2 = data2.paths;
            
            var datString3 = "#{data3}".replace(/&quot;/g, '"');
            var comp3 = decodeURIComponent(datString3);
            var data3 = JSON.parse(comp3);
            
            pathArray3 = data3.paths;
            
                            
            window.initMap = function initMap() {
              var origin_place_id = null;
              var destination_place_id = null;
              var travel_mode = 'WALKING';

              map = new google.maps.Map(document.getElementById('map'), {
                mapTypeControl: false,
                center: {lat: 32.879350, lng: -117.238559},
                zoom: 16
              });
              var directionsService = new google.maps.DirectionsService;
              var directionsDisplay = new google.maps.DirectionsRenderer;
              directionsDisplay.setMap(map);

              var origin_input = document.getElementById('origin-input');
              var destination_input = document.getElementById('destination-input');
              var modes = document.getElementById('mode-selector');

              map.controls[google.maps.ControlPosition.TOP_LEFT].push(origin_input);
              map.controls[google.maps.ControlPosition.TOP_LEFT].push(destination_input);
              map.controls[google.maps.ControlPosition.TOP_LEFT].push(modes);

              var origin_autocomplete = new google.maps.places.Autocomplete(origin_input);
              origin_autocomplete.bindTo('bounds', map);
              var destination_autocomplete =
                  new google.maps.places.Autocomplete(destination_input);
              destination_autocomplete.bindTo('bounds', map);


              // Sets a listener on a radio button to change the filter type on Places
              // Autocomplete.
              function setupClickListener(id, mode) {
                var radioButton = document.getElementById(id);
                radioButton.addEventListener('click', function() {
                  travel_mode = mode;
                });
              }
              setupClickListener('changemode-walking', 'WALKING');
              setupClickListener('changemode-transit', 'TRANSIT');
              setupClickListener('changemode-driving', 'DRIVING');

              function expandViewportToFitPlace(map, place) {
                if (place.geometry.viewport) {
                  map.fitBounds(place.geometry.viewport);
                } else {
                  map.setCenter(place.geometry.location);
                  map.setZoom(17);
                }
              }

              origin_autocomplete.addListener('place_changed', function() {
                var place = origin_autocomplete.getPlace();
                if (!place.geometry) {
                  window.alert("Autocomplete's returned place contains no geometry");
                  return;
                }
                expandViewportToFitPlace(map, place);

                // If the place has a geometry, store its place ID and route if we have
                // the other place ID
                origin_place_id = place.place_id;
                route(origin_place_id, destination_place_id, travel_mode,
                      directionsService, directionsDisplay);
              });

              destination_autocomplete.addListener('place_changed', function() {
                var place = destination_autocomplete.getPlace();
                if (!place.geometry) {
                  window.alert("Autocomplete's returned place contains no geometry");
                  return;
                }
                expandViewportToFitPlace(map, place);

                // If the place has a geometry, store its place ID and route if we have
                // the other place ID
                destination_place_id = place.place_id;
                route(origin_place_id, destination_place_id, travel_mode,
                      directionsService, directionsDisplay);
              });

                      function route(origin_place_id, destination_place_id, travel_mode,
                             directionsService, directionsDisplay) {
                if (!origin_place_id || !destination_place_id) {
                  return;
                }
                directionsService.route({
                  origin: {'placeId': origin_place_id},
                  destination: {'placeId': destination_place_id},
                  travelMode: travel_mode
                }, function(response, status) {
                  if (status === 'OK') {
                    directionsDisplay.setDirections(response);
                  } else {
                    window.alert('Directions request failed due to ' + status);
                  }
                });
              }


              //Add paths
              
              var path = new google.maps.Polyline({
                  path: pathArray,
                  geodesic: true,
                  strokeColor: '#f44336',
                  strokeOpacity: 1.0,
                  strokeWeight: 6
              });
              
              var path2 = new google.maps.Polyline({
                  path: pathArray2,
                  geodesic: true,
                  strokeColor: '#33cc33',
                  strokeOpacity: 1.0,
                  strokeWeight: 6
              });
              
              var path3 = new google.maps.Polyline({
                  path: pathArray3,
                  geodesic: true,
                  strokeColor: '#ff9933',
                  strokeOpacity: 1.0,
                  strokeWeight: 6
              });

              path.setMap(map);
              path2.setMap(map);
              path3.setMap(map);
              
             // var infoWindow = new google.maps.InfoWindow({map: map});
               var image = 'places.png';

            

             var currLocMarker = new google.maps.Marker({
                    animation: google.maps.Animation.DROP,
                    icon: image,
                    scale: 0.01,
                    map: map,
                  });

              // Try HTML5 geolocation.
              if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function(position) {
                  var pos = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                  };

                  currLocMarker.setPosition(pos);

                  //infoWindow.setPosition(pos);
                  //infoWindow.setContent('Current Location');
                  map.setCenter(pos);

                }, function() {
                  handleLocationError(true, infoWindow, map.getCenter());
                });
              } else {
                // Browser doesn't support Geolocation
                handleLocationError(false, infoWindow, map.getCenter());
              }
            }

            function handleLocationError(browserHasGeolocation, infoWindow, pos) {
              infoWindow.setPosition(pos);
              infoWindow.setContent(browserHasGeolocation ?
                                    'Error: The Geolocation service failed.' :
                                    'Error: Your browser doesn\'t support geolocation.');
            }
        })

    script(async defer src="https://maps.googleapis.com/maps/api/js?v=3&key=AIzaSyC4Mdmwz4M0GbhDNj1PwjTnQ7FTx-wOLic&libraries=places&callback=initMap").





